// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import {ConfirmedOwner} from "@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol";
import {LinkTokenInterface} from "@chainlink/contracts/src/v0.8/shared/interfaces/LinkTokenInterface.sol";
import {VRFV2PlusWrapperConsumerBase} from "@chainlink/contracts/src/v0.8/vrf/dev/VRFV2PlusWrapperConsumerBase.sol";
import {VRFV2PlusClient} from "@chainlink/contracts/src/v0.8/vrf/dev/libraries/VRFV2PlusClient.sol";
import {AutomationCompatibleInterface} from "@chainlink/contracts/src/v0.8/automation/AutomationCompatible.sol";

/*
*/

contract Raffle is VRFV2PlusWrapperConsumerBase, ConfirmedOwner, AutomationCompatibleInterface {
    uint256 private immutable i_entranceFee;
    uint256 private immutable i_interval;
    uint256 private lastTimeStamp;
    bool public enableNativePayment = false;

    error upKeepNotNeed(uint256 rafState);
    error NotEnoughEthToEnter();

    address payable[] public s_players;

    /* TYPE DECLARATION */
    enum RafState {
        isOpen,
        Calculating
    }

    event newEntry(address indexed entree, uint256 ethPush);
    event RequestSent(uint256 requestId, uint32 numWords);
    event RequestFulfilled(uint256 requestId, uint256[] randomWords, uint256 payment);

    struct RequestStatus {
        uint256 paid;
        // amount paid in link
        bool fulfilled;
        // whether the request has been successfully fulfilled
        uint256[] randomWords;
    }

    mapping(uint256 => RequestStatus) public s_requests;

    /* requestId --> requestStatus */

    // past requests Id.
    uint256[] public requestIds;
    uint256 public lastRequestId;

    // Depends on the number of requested values that you want sent to the
    // fulfillRandomWords() function. Test and adjust
    // this limit based on the network that you select, the size of the request,
    // and the processing of the callback request in the fulfillRandomWords()
    // function.
    uint32 public callbackGasLimit = 100000;

    // The default is 3, but you can set this higher.
    uint16 public requestConfirmations = 3;

    // For this example, retrieve 2 random values in one request.
    // Cannot exceed VRFV2Wrapper.getConfig().maxNumWords.
    uint32 public numWords = 2;

    // Address LINK - hardcoded for Sepolia
    address public linkAddress = 0x779877A7B0D9E8603169DdbD7836e478b4624789;

    // address WRAPPER - hardcoded for Sepolia
    address public wrapperAddress = 0x195f15F2d49d693cE265b4fB0fdDbE15b1850Cc1;

    RafState public rstate;

    error rafTxFailed();

    constructor(uint256 fee, uint256 interval)
        ConfirmedOwner(msg.sender)
        VRFV2PlusWrapperConsumerBase(wrapperAddress)
    {
        i_entranceFee = fee;
        i_interval = interval;

        lastTimeStamp = block.timestamp;
        rstate = RafState.isOpen;
    }

    function getRafState() external returns (RafState) {
        return rstate;
    }

    modifier checkIsActive() {
        require(rstate == RafState.isOpen, "Raffle Closed");
        _;
    }

    function checkUpkeep(bytes memory /* checkData */ )
        public
        view
        override
        returns (bool upkeepNeeded, bytes memory /* performData */ )
    {
        bool timepassed = (block.timestamp - lastTimeStamp) > i_interval;
        bool isOpen = rstate == RafState.isOpen;
        bool hasBal = address(this).balance > 0;
        bool hasPlayers = s_players.length > 0;

        upkeepNeeded = isOpen && hasBal && timepassed && hasPlayers;

        return (upkeepNeeded, "");

        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */ ) external {
        (bool upkeep,) = checkUpkeep("");
        if (!upkeep) {
            revert upKeepNotNeed(uint256(rstate));
        }
        rstate = RafState.Calculating;
        bytes memory extraArgs =
            VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: enableNativePayment}));
        uint256 requestId;
        uint256 reqPrice;
        if (enableNativePayment) {
            (requestId, reqPrice) =
                requestRandomnessPayInNative(callbackGasLimit, requestConfirmations, numWords, extraArgs);
        } else {
            (requestId, reqPrice) = requestRandomness(callbackGasLimit, requestConfirmations, numWords, extraArgs);
        }
        s_requests[requestId] = RequestStatus({paid: reqPrice, randomWords: new uint256[](0), fulfilled: false});
        requestIds.push(requestId);
        lastRequestId = requestId;
        emit RequestSent(requestId, numWords);
        // We don't use the performData in this example. The performData is generated by the Automation Node's call to your checkUpkeep function
    }

    function enterRaf() public payable checkIsActive {
        if (msg.value < i_entranceFee) {
            revert NotEnoughEthToEnter();
        }
        s_players.push(payable(msg.sender));
        emit newEntry(msg.sender, msg.value);
    }

    function getPlayer(uint256 indx) external returns (address) {
        return s_players[indx];
    }

    function pickWinner() external onlyOwner returns (uint256) {
        if (block.timestamp - lastTimeStamp < i_interval) {
            revert();
        }
        rstate = RafState.Calculating;
        bytes memory extraArgs =
            VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: enableNativePayment}));
        uint256 requestId;
        uint256 reqPrice;
        if (enableNativePayment) {
            (requestId, reqPrice) =
                requestRandomnessPayInNative(callbackGasLimit, requestConfirmations, numWords, extraArgs);
        } else {
            (requestId, reqPrice) = requestRandomness(callbackGasLimit, requestConfirmations, numWords, extraArgs);
        }
        s_requests[requestId] = RequestStatus({paid: reqPrice, randomWords: new uint256[](0), fulfilled: false});
        requestIds.push(requestId);
        lastRequestId = requestId;
        emit RequestSent(requestId, numWords);
        return requestId;
    }

    function getRafFee() public view returns (uint256) {
        return i_entranceFee;
    }

    /*
    function requestRandomWords(bool enableNativePayment) external onlyOwner returns (uint256) {
        bytes memory extraArgs =
            VRFV2PlusClient._argsToBytes(VRFV2PlusClient.ExtraArgsV1({nativePayment: enableNativePayment}));
        uint256 requestId;
        uint256 reqPrice;
        if (enableNativePayment) {
            (requestId, reqPrice) =
                requestRandomnessPayInNative(callbackGasLimit, requestConfirmations, numWords, extraArgs);
        } else {
            (requestId, reqPrice) = requestRandomness(callbackGasLimit, requestConfirmations, numWords, extraArgs);
        }
        s_requests[requestId] = RequestStatus({paid: reqPrice, randomWords: new uint256[](0), fulfilled: false});
        requestIds.push(requestId);
        lastRequestId = requestId;
        emit RequestSent(requestId, numWords);
        return requestId;
    }*/

    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {
        require(s_requests[_requestId].paid > 0, "request not found");
        s_requests[_requestId].fulfilled = true;
        s_requests[_requestId].randomWords = _randomWords;
        emit RequestFulfilled(_requestId, _randomWords, s_requests[_requestId].paid);
        uint256 iow = _randomWords[0] % s_players.length;
        address payable rw = s_players[iow];
        rstate = RafState.isOpen;
        s_players = new address payable[](0);
        lastTimeStamp = block.timestamp;
        (bool success,) = rw.call{value: address(this).balance}("");
        if (!success) {
            revert rafTxFailed();
        }
    }

    function getRequestStatus(uint256 _requestId)
        external
        view
        returns (uint256 paid, bool fulfilled, uint256[] memory randomWords)
    {
        require(s_requests[_requestId].paid > 0, "request not found");
        RequestStatus memory request = s_requests[_requestId];
        return (request.paid, request.fulfilled, request.randomWords);
    }

function setRaffleToCal() public{
    rstate=RafState.Calculating;
}
    /**
     * Allow withdraw of Link tokens from the contract
     */
    function withdrawLink() public onlyOwner {
        LinkTokenInterface link = LinkTokenInterface(linkAddress);
        require(link.transfer(msg.sender, link.balanceOf(address(this))), "Unable to transfer");
    }

    /// @notice withdrawNative withdraws the amount specified in amount to the owner
    /// @param amount the amount to withdraw, in wei
    function withdrawNative(uint256 amount) external onlyOwner {
        (bool success,) = payable(owner()).call{value: amount}("");
        // solhint-disable-next-line gas-custom-errors
        require(success, "withdrawNative failed");
    }

    event Received(address, uint256);

    receive() external payable {
        emit Received(msg.sender, msg.value);
    }
}
